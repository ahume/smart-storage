This is a light wrapper around HTML5 localStorage. It doesn't attempt to polyfill older browsers, so any application using it needs to make sure that the application handles that gracefully.

As well as the normal get/set/remove methods, it also contains other potentially useful ways of manipulating the store, including setting expiry times. Many of these operations are inspired by Redis commands. A full list of current methods is below as well a simple example to get started.

Minified and gzipped size of the current script is around 1k.

Example:
========

var store = new SmartStorage("my_store");

// Store string
store.set("key", "value");
store.get("key");
>> "value"

// Store object/hash with expiry time of 2 minutes.
store.set("my_object", {"key1": "value1", "key2": "value2"}, 120 * 1000); // Expires in 120*1000 = 2 minutes.
store.get("my_object").key2;
>> "value2"

store.set("my_int", 10);
store.incr("my_int");
>> 11
store.incr("my_int");
>> 12

Implemented methods:
====================

set(key, val, [expiry]) - Set key to the value. Optional expiry time in milliseconds. Overrides anything that is already set.

get(key) - Get value for passed in key. Returns null if it doesn't exist.

remove(key) - Removes an entry from the browser store.

append(val) - If key exists and is a string, this appends the value to the end of that string, and returns the new length of the string. If key does not exist it creates it, similar to set().

incr([val]) - Increments the stored value by optional passed in val, or 1. If it does not exist or is of the wrong type the value is set to 0 before incrementing. Returns the value of the key after the increment.

decr([val]) - Decrements the stored value by optional passed in value, or 1. If it does not exist or is of the wrong type the value is set to 0 before decrementing. Returns the value of the key after the decrement.

rename(key, newkey) - Renames key to newkey. Throws an error if key and newkey are the same, or if key does not exist. Overwrites existing newkey.

setnx(key, value) - Set key to value only if no value exists for that key.

getset(key, value) - Sets key to value and returns the old value stored in key.

expire(key, time) - Set expiry time on a key. Returns true if the key existed and expiry has been applied, false if not.

persist(key) - Remove expiry time on a key. Returns true if the key existed and expiry has been cancelled, false if not.

push(key, value) - Push a value on to an array. If no existing array then create it. Returns the length of the array after push.

pop(key) - Pop a value from the end of an array. Returns the length of the array after push.

unshift(key, value) - Add a value on to the beginning of an array. If no existing array then create it. Returns the length of the array after unshift.

shift(key) - Remove a value from the beginning of an array. Returns the length of the array after shift.


More:
- Can we guarantee atomicity of certain operations? eg. incr, append
